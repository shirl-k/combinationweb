<div class="card m-2" id="comments-new">
    <div class="card-body">
        <!--댓글 작성 폼-->
        <form>
            <!--1. 닉네임 입력 폼-->
            <div class="mb-3">
                <label for="exampleInputEmail1" class="form-label">닉네임</label>
                <input type="text" class="form-control" id="new-comment-nickname">
            </div>

            <!--2. 댓글 본문 입력-->
            <div class="mb-3">
                <label for="exampleInputPassword1" class="form-label">댓글 내용</label>
                <textarea type="text" class="form-control" rows="3" id="new-comment-body"></textarea>
            </div> <!--속성 설정(type: text, rows:3, id: new-comment-body)-->

            <!--3. 히든 인풋 만들기(웸 페이지에는 표시되지 않아서 보이지 않지만 값을 가지고 있을 때 씀)-->
            {{#boxing}}
                <input type="hidden" id="new-comment-boxing-id" value="{{id}}">
            {{/boxing}} <!--머스테치 문법으로 변수 사용범위 지정함-->

            <!--4. 전송 버튼-->
            <button type="button" class="btn btn-primary" id="comment-create-btn">댓글 작성</button>
        </form>
    </div>
</div>


<!--자바스크립트로 댓글 달기-->
<script>
    {
    //댓글 생성 버튼 변수화 //댓글 작성 버튼을 변수로 받아옴
    const commentCreateBtn = document.querySelector("#comment-create-btn"); //아이디 선택자 (#id)
    //댓글 클릭 이벤트 감지 (요소명.addEventListener("이벤트_타입",이벤트_처리_함수)

    commentCreateBtn.addEventListner("click",function() {
        //console.log("버튼을 클릭했습니다");

        //addEventListener 메서드 실행 결과 =
        // [댓글 작성] 버튼 (commentCreateBtn)을 "click" 했을 때 함수 => function() {명령문} 를 실행
        //함수 실행 후 console문 실행해서 "버튼을 클릭했습니다" 출력

        // 새 댓글 객체 생성 : 객체 리터럴 방식 (객체를 변수로 선언해 사용)
        //객체 리터럴 방식 [형식]
        const comment = {
            //새 댓글의 닉네임
            nickname: document.querySelector("new-comment-nickname").value,
            //새 댓글의 본문
            body: document.querySelector("new-comment-body").value,
            //부모 게시글의 id
            boxingId: document.querySelector("new-comment-boxing-id").value
        };
        //댓글 객체 출력
        console.log(comment);

        <!--자바스크립트로 REST API 호출하고 응답 처리하기 => 웹페이지에서 직접 자바스크립트 활용해 보내기-->

        //fetch() - 비동기 통신을 위한 API - 두가지 값 전달
        // => (1. API 주소를 가지고 있는 url 2. 2.1 요청 메서드,  2.2헤더 정보, 2.3전송 본문)

        //1. API 주소를 가지고 있는 url
        const url = "/api/boxing/" + comment.boxingId + "/comments"; //const 타입 url 변수에 댓글 생성 API 주소 저장
        //2. 2.1 요청 메서드,  2.2헤더 정보, 2.3전송 본문) -----------------------------
        fetch(url, {
            method: "POST", //POST요청   // 2.1 요청 메서드
            headers: {  //헤더 정보에 전송 본문의 데이터 타입이 JSON임을 명시하는 내용 넣음
                "Content-Type": "application/json"  //2.2헤더 정보
            },
            body: JSON.stringify(comment) //comment 객체를, JSON 문자열로 변환(stringify)해 전송
        }) //2.3전송 본문 ----------------------------
                .then(response => { //HTTP 응답 코드에 따른 메시지 출력. 여기서 response는 API 요청을 보내고 받은 응답 객체

                    //삼항연산자 - 응답 객체의 상태가 ok이면 "댓글이 등록됐습니다", 아니면 "댓글 등록 실패" 를 msg 변수에 저장 후 alert()함수로 출력
                    const msg = (response.ok) ? "댓글이 등록됐습니다." : "댓글 등록 실패"; // 응답 처리
                    alert(msg); //alert()함수에 msg 변수 넣어 출력
                    //현재 페이지 새로 고침
                    window.location.reload(); //새로 고침
                });
    }
</script>